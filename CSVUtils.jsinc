var CSVUtils = (function(){	var DMProps,	DMOpts;		var csvAPI = 	{		getSourceFile:function(doc)		{			var lks, lk;									if ( !(doc instanceof Document || !doc.isValid) ){ return null; }						lks = doc.links.everyItem().getElements();						while ( lk = lks.pop() )			{								if ( lk.linkType == "XML" || /\.csv$/i.test (lk.name) )				{					if ( lk.status == LinkStatus.LINK_MISSING					|| lk.status == LinkStatus.LINK_INACCESSIBLE )					{						return null;					}					return File ( lk.filePath );				}			}					return null;		},			setDMProps:function( doc )		{			DMProps = doc.dataMergeProperties;		},			setDMOpts:function ( doc )		{			DMOpts = doc.dataMergeOptions;		},			loadCSVFile:function ( csvFile )		{			try			{				DMProps.selectDataSource ( csvFile );				return true;			}			catch(e)			{				alert(e);				return false;			}		},			merge:function()		{			DMProps.mergeRecords();		},				setupDataMergeOptions:function (bCreateNewDocument, bLinkImages, bRemoveBlankLines, nDocumentSize )		{			DMOpts.createNewDocument = bCreateNewDocument;			DMOpts.linkImages = bLinkImages;			DMOpts.removeBlankLines = bRemoveBlankLines;			DMOpts.documentSize = nDocumentSize;		},			setupDataMergeProps:function (eRecordsPerPage, eRecordSelection, sRecordRange)		{						DMProps.dataMergePreferences.recordsPerPage = eRecordsPerPage;			DMProps.dataMergePreferences.recordSelection = eRecordSelection;			if ( eRecordSelection == RecordSelection.RANGE )			{				DMProps.dataMergePreferences.recordRange = sRecordRange;			}		},			getRowCount:function( csvFile )		{			var count = -1;						csvFile.open( 'r' );			while ( !csvFile.eof )			{				csvFile.readln ();				count++;			}			csvFile.close();						return count;		},				getCSVLink:function(doc)		{			var lks = doc.links.everyItem().getElements(), lk, found = false;						while ( lk = lks.pop() )			{				if ( lk.linkType == "XML" || /\.csv$/i.test (lk.name) )				{					found = true;					break;				}			}					return found? lk : null; 		},			getDataFields:function()		{			return DMProps.dataMergeFields;		},			createTempCSVFile:function( CSVData )		{			var tempFile = new File ( Folder.temp+"/temp.txt" ),			i = 0, n = CSVData.rows.length;									//$.writeln ("headers:"+ CSVData.headers.length );						for ( i = 0 ; i < n ; i++ )			{				//$.writeln ( "row "+(i+1)+":"+CSVData.rows[i].length );				CSVData.rows[i] = CSVData.rows[i].join("\t");			}			//tempFile.encoding = "UTF-8";						tempFile.open ( 'w' );						tempFile.write ( CSVData.headers.join("\t")+"\r"+CSVData.rows.join ( "\r" ) );						tempFile.close();						return tempFile;		},			removeTempCSVFile:function()		{			var tempFile = File ( Folder.temp+"/temp.csv" );						if ( !tempFile.exists ){ return; }						tempFile.remove();		},			clearCSVLink:function()		{			var tempFile = new File ( Folder.temp+"/temp.txt" );			if( tempFile.exists ){ tempFile.remove(); }						DMProps.removeDataSource();		},			getData:function(fieldNames)		{			var headers, separator, lines = [], items, content,matches,			reg = /^[^;,\t]+([;,\t])/, reg2 = /[^;,\t\n]+/g,			datas = {rows:[], headers:[]}, line = [], i=0, n=0, csvContent, headersCount,			dummyArray;						//Get headers			csvFile.open( 'r' );			headers = csvFile.readln();			separator = headers.match ( reg );			separator = ( separator == null )? "\r" : separator[1];			datas.headers = headers.split ( separator );			datas.separator = separator;			csvFile.close();			//Get Rows			csvFile.open('r');			while ( !csvFile.eof )			{				lines [ lines.length ] = csvFile.readln();			}					//remove headers			lines.shift();			//then feed data.rows with every csv lines			n = lines.length;			for ( i = 0; i < n ; i++ )			{				datas.rows [datas.rows.length ] = lines[i].split (separator);			}					csvFile.close();						return datas;		},			getFullData:function(file, encoding)		{			var data = {rows:[]}, ln;			var reg = /^[^;,\t]+([;,\t])/, reg2 = /[^;,\t\n]+/g, reg3 = /[;,\t\n]/;			var dataLine;						if ( file == undefined || !(file instanceof File ) || !file.exists || !/\.(csv|txt)$/i.test(file.name) ) return data;						var lineIsHeader = true;			if ( encoding ) file.encoding = encoding;						file.open('r');			while ( !file.eof )			{				if ( lineIsHeader )				{					headers = file.readln().replace ( /(^\"|\"$)/g,"" ).replace ( /\"([;,\t])\"/g, "$1" );					var separator = headers.match ( reg3 );					separator = ( separator == null )? "\r" : separator; //[1];					data.headers = headers.split(separator);					var n = data.headers.length;					lineIsHeader = false;									}				dataLine = file.readln();				//dataLine = dataLine.replace ( /(^\"|\"$)/g,"" ).replace ( /\"([;,\t])\"/g, "$1" );															var rowData = dataLine.split(separator);				var rowObject = {};				for ( i = 0 ; i < n ; i++ )				{					rowObject[ data.headers[i] ] = rowData[i];				}				rowObject.data = rowData;				data.rows.push ( rowObject );			}			file.close();						return data;		}	};		return csvAPI;})();