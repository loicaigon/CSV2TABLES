var XMPClass = (function(){	var loaded = false;		if ( !ExternalObject.AdobeXMPScript )	{		try		{			ExternalObject.AdobeXMPScript = new ExternalObject('lib:AdobeXMPScript');			loaded = true;		}		catch (e)		{			//alert('Unable to load the AdobeXMPScript library!'); 			//return false;		}	}		return {				isLoaded:function(){			return loaded;		},			loadXMPLibrary:function()		{			if ( !ExternalObject.AdobeXMPScript )			{				try				{					ExternalObject.AdobeXMPScript = new ExternalObject('lib:AdobeXMPScript');				}				catch (e)				{					alert('Unable to load the AdobeXMPScript library!'); 					return false;				}			}					return true;		},			getXMP:function(file) {						var xmpFile = new XMPFile(file.fsName, XMPConst.UNKNOWN, XMPConst.OPEN_FOR_READ);			var xmp = xmpFile.getXMP();			xmpFile.closeFile(XMPConst.CLOSE_UPDATE_SAFELY);			return xmp;					},			getProperty:function (myXmp, norme, key)		{			var prop = "", i = 0, n = 0;						switch ( norme )			{				case "dc":									if ( key == "creator"					|| key == "title"					|| key == "description"					|| key == "rights" )					{						prop = myXmp.getArrayItem(XMPConst.NS_DC, key, 1);					}					else if ( key == "subject" )					{												n = myXmp.countArrayItems(XMPConst.NS_DC, "subject");												prop = "";						for ( i = 0; i < n ;  i++ )						{							if ( i > 0 ) prop+= ",";							prop += myXmp.getArrayItem(XMPConst.NS_DC, "subject", (i+1)).value;						}					}					else if (key == "format")					{						prop = myXmp.getProperty ( XMPConst.NS_DC, "format");					}					break;									case "photoshop":									prop = myXmp.getProperty ( XMPConst.NS_PHOTOSHOP, key);					break;									case "Iptc4xmpCore": 									if ( key == "IntellectualGenre"					|| key == "Location"					|| key == "CountryCode")					{						prop = myXmp.getProperty ( XMPConst.NS_IPTC_CORE, key);					}					else if ( key == "CiAdrCity"						|| key == "CiAdrExtadr"						|| key == "CiAdrRegion"						|| key == "CiAdrPcode"						|| key == "CiTelWork"						|| key == "CiEmailWork"						|| key == "CiUrlWork"						|| key == "CiAdrCtry")					{						prop = myXmp.getProperty(XMPConst.NS_IPTC_CORE,"CreatorContactInfo/Iptc4xmpCore:"+key);					}					else if ( key == "SubjectCode" )					{						myXmp.getArrayItem(XMPConst.NS_IPTC_CORE, "SubjectCode", 1);					}					else if ( key == "Scene" )					{						myXmp.getArrayItem(XMPConst.NS_IPTC_CORE, "Scene", 1);					}					break;									case "xmpRights":					prop = myXmp.getProperty ( XMPConst.NS_XMP_RIGHTS, key);					break;									case "xmp":					prop = myXmp.getProperty ( XMPConst.NS_XMP, key);					break;									case "tiff":									if ( key == "Orientation"					|| key == "ImageWidth"					|| key == "ImageLength"					|| key == "PhotometricInterpretation"					|| key == "SamplesPerPixel"					|| key == "XResolution"					|| key == "YResolution"					|| key == "ResolutionUnit")					{						prop = myXmp.getProperty ( XMPConst.NS_TIFF, key);					}					break;								case "exif":					if ( key == "PixelXDimension"					|| key == "PixelYDimension")					{						prop = myXmp.getProperty ( XMPConst.NS_EXIF, key);					}					break;									default:					prop = myXmp.getProperty ( norme, key);			}						if (prop+""=="" || prop+""=="undefined" )			{				prop = "";			}			else if ( prop instanceof XMPProperty )			{				prop = prop.value;			}					return prop;		},			getWidth:function(myXmp)		{			var th = new Thumbnail ( script.model.currentFile.fsName ), 			width = th.core.quickMetadata.width;						if ( !width )			{				width = this.getProperty ( myXmp, "exif", "PixelXDimension");			}					if ( !width )			{				width = this.getProperty ( myXmp, "tiff", "ImageWidth");			}					return width;		},			getHeight:function(myXmp)		{			var th = new Thumbnail ( script.model.currentFile.fsName ), 			height = th.core.quickMetadata.height;						if ( !height )			{				height = this.getProperty ( myXmp, "exif", "PixelYDimension");			}			if ( !height )			{				height = this.getProperty ( myXmp, "tiff", "ImageLength");			}			return height;		},			getResolution:function(myXmp)		{			var resolution;			var th = new Thumbnail ( script.model.currentFile.fsName );			resolution =  th.core.quickMetadata.xResolution;			resolution = ( !resolution )? eval ( "(" + this.getProperty ( myXmp, "tiff", "XResolution") +")" ) : resolution ;			return resolution;		},			getMode:function(myXmp)		{			var th = new Thumbnail ( script.model.currentFile.fsName ),			modeArray = ["monochrome bitmap", "gray scale", "indexed", "RGB", "CMYK", "HSL", "HSB", "multi-channel", "duotone", "LAB", "XYZ" ],			mode = th.core.quickMetadata.colorMode;						$.writeln ( "mode1:"+mode );						if ( mode && mode >= 0)			{				mode = modeArray [ th.core.quickMetadata.colorMode ];			}			else			{				$.writeln ( "mode2:"+mode );				$.writeln ( "this.getProperty:"+this.getProperty ( myXmp, "photoshop", "ColorMode") );				mode = modeArray [ this.getProperty ( myXmp, "photoshop", "ColorMode") ];				$.writeln ( "mode3:"+mode );			}						if ( !mode )			{				mode = "";			}					return mode ;		},			getProfile:function(myXmp)		{			var th = new Thumbnail ( script.model.currentFile.fsName ),			profile = th.core.quickMetadata.colorProfile;						if ( !profile )			{				profile = this.getProperty ( myXmp, "photoshop", "ICCProfile")			}					if ( !profile )			{				profile = "";			}					return  profile ;		},				setCustomProperty:function(file,customNamespace, customPrefix,key,value){						if (file instanceof File) {								var xmpFile = new XMPFile(file.fsName, XMPConst.UNKNOWN, XMPConst.OPEN_FOR_UPDATE);				var xmp = xmpFile.getXMP();				XMPMeta.registerNamespace(customNamespace, customPrefix);				xmp.deleteProperty(customNamespace, customPrefix+key);				xmp.setProperty ( customNamespace, customPrefix+key, value);				// write updated metadata into the file				if (xmpFile.canPutXMP(xmp)) {					xmpFile.putXMP(xmp);				}							xmpFile.closeFile(XMPConst.CLOSE_UPDATE_SAFELY);			}		},			getCustomProperty:function(file,customNamespace, customPrefix,key) {			var prop;							if (file instanceof File) {								var xmpFile = new XMPFile(file.fsName, XMPConst.UNKNOWN, XMPConst.OPEN_FOR_UPDATE);								var xmp = xmpFile.getXMP();								XMPMeta.registerNamespace(customNamespace, customPrefix);				prop = xmp.getProperty ( customNamespace, customPrefix+key );								xmpFile.closeFile(XMPConst.CLOSE_UPDATE_SAFELY);			}						return prop;		},					deleteCustomProperty:function(file,customNamespace, customPrefix,key) {			if (file instanceof File) {								var xmpFile = new XMPFile(file.fsName, XMPConst.UNKNOWN, XMPConst.OPEN_FOR_UPDATE);								var xmp = xmpFile.getXMP();				$.writeln ("la:"+ xmp.getProperty ( customNamespace, customPrefix+":"+key ) );				XMPMeta.registerNamespace(customNamespace, customPrefix);				xmp.deleteProperty ( customNamespace, customPrefix+":"+key );				if (xmpFile.canPutXMP(xmp)) {					xmpFile.putXMP(xmp);				}								xmpFile.closeFile(XMPConst.CLOSE_UPDATE_SAFELY);								return true;			}					return false;		},			setProperty:function ( file, norme , key , value )		{			var thumb, md, myXMP;						if ( ! ( file instanceof File ) )			{				return;			}					thumb = new Thumbnail(file.fsName );			if(thumb.hasMetadata)			{				md = thumb.synchronousMetadata; 				myXMP = new XMPMeta( md.serialize() );								switch ( norme )				{					case "dc":											if ( key == "creator"						|| key == "title"						|| key == "description"						|| key == "subject"						|| key == "rights" )						{														myXMP.deleteProperty(XMPConst.NS_DC, key);														myXMP.appendArrayItem(XMPConst.NS_DC, key, value, 0, XMPConst.ALIAS_TO_ALT_TEXT);														myXMP.setQualifier(XMPConst.NS_DC, key+"[1]", "http://www.w3.org/XML/1998/namespace", "lang", "x-default");													}						/*						//NOT SURE format IS EDITABLE (image/jpg par ex)						else if (key == "format")						{													}						break;						*/											case "photoshop":											myXMP.deleteProperty(XMPConst.NS_PHOTOSHOP, key);						myXMP.setProperty(XMPConst.NS_PHOTOSHOP, key, value);						break;											case "Iptc4xmpCore": 											if ( key == "IntellectualGenre"						|| key == "Location"						|| key == "CountryCode")						{							myXMP.deleteProperty(XMPConst.NS_IPTC_CORE, key );							myXMP.setProperty(XMPConst.NS_IPTC_CORE, key, value);						}						else if ( key == "CiAdrCity"						|| key == "CiAdrExtadr"						|| key == "CiAdrRegion"						|| key == "CiAdrPcode"						|| key == "CiTelWork"						|| key == "CiEmailWork"						|| key == "CiUrlWork"						|| key == "CiAdrCtry")						{							myXMP.deleteProperty(XMPConst.NS_IPTC_CORE, "CreatorContactInfo/Iptc4xmpCore:"+key );							myXMP.setProperty(XMPConst.NS_IPTC_CORE, "CreatorContactInfo/Iptc4xmpCore:"+key, value);						}						else if ( key == "SubjectCode" )						{							xmp.deleteProperty(XMPConst.NS_IPTC_CORE, "SubjectCode");							xmp.appendArrayItem(XMPConst.NS_IPTC_CORE, "SubjectCode", value, 0, XMPConst.PROP_IS_ARRAY);						}						else if ( key == "Scene" )						{							xmp.deleteProperty(XMPConst.NS_IPTC_CORE, "Scene");							xmp.appendArrayItem(XMPConst.NS_IPTC_CORE, "Scene", value, 0, XMPConst.PROP_IS_ARRAY);						}											break;											case "xmpRights":							myXMP.deleteProperty(XMPConst.NS_XMP_RIGHTS, key );							myXMP.setProperty(XMPConst.NS_XMP_RIGHTS, key, value);						break;											case "tiff":											if ( key == "Orientation"						|| key == "ImageWidth"						|| key = "ImageLength"						|| key == "PhotometricInterpretation"						|| key == "SamplesPerPixel"						|| key == "XResolution"						|| key == "YResolution"						|| key == "ResolutionUnit")						{													}						break;					default:												myXMP.deleteProperty(norme, key );						myXMP.setProperty(norme, key, value);										}							var updatedPacket = myXMP.serialize(XMPConst.SERIALIZE_OMIT_PACKET_WRAPPER | XMPConst.SERIALIZE_USE_COMPACT_FORMAT);								thumb.metadata = new Metadata(updatedPacket);							}		}	}})();